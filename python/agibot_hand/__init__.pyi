from typing import List, Union, Optional
from enum import IntEnum

class EFinger(IntEnum):
    THUMB = 1
    INDEX = 2
    MIDDLE = 3
    RING = 4
    LITTLE = 5

class EControlMode(IntEnum):
    POSITION = 0
    VELOCITY = 1
    TORQUE = 2
    POSITION_TORQUE = 3
    VELOCITY_TORQUE = 4
    POSITION_VELOCITY_TORQUE = 5
    UNKNOWN = 10

class TouchSensorData:
    online_state: int
    normal_force: int
    tangent_force: int
    tangent_force_angle: int

    def __init__(self) -> None: ...
    
    @property
    def channel_values(self) -> List[int]: ...
    
    @property
    def capacitive_approach(self) -> List[int]: ...

class JointMotorErrorReport:
    stalled: bool
    overheat: bool
    over_current: bool
    motor_except: bool
    commu_except: bool

    def __init__(self) -> None: ...

class MixCtrl:
    joint_index: int
    ctrl_mode: int
    tgt_posi: Optional[int]
    tgt_velo: Optional[int]
    tgt_torque: Optional[int]

    def __init__(self) -> None: ...

class AgibotHandO12:
    def __init__(self, device_id: int = 1) -> None: ...
    
    # Device management
    def set_device_id(self, device_id: int) -> None: ...
    
    # Position control
    def set_joint_position(self, joint_motor_index: int, posi: int) -> None: ...
    def get_joint_position(self, joint_motor_index: int) -> int: ...
    def set_all_joint_positions(self, vec_posi: List[int]) -> None: ...
    def get_all_joint_positions(self) -> List[int]: ...
    
    # Velocity control
    def set_joint_velocity(self, joint_motor_index: int, velo: int) -> None: ...
    def get_joint_velocity(self, joint_motor_index: int) -> int: ...
    def set_all_joint_velocities(self, vec_velo: List[int]) -> None: ...
    def get_all_joint_velocities(self) -> List[int]: ...
    
    # Torque control
    def set_joint_torque(self, joint_motor_index: int, torque: int) -> None: ...
    def get_joint_torque(self, joint_motor_index: int) -> int: ...
    def set_all_joint_torques(self, vec_torque: List[int]) -> None: ...
    def get_all_joint_torques(self) -> List[int]: ...
    
    # Sensor data
    def get_touch_sensor_data(self, eFinger: EFinger) -> TouchSensorData: ...
    
    # Control mode
    def set_control_mode(self, joint_motor_index: int, mode: int) -> None: ...
    def get_control_mode(self, joint_motor_index: int) -> int: ...
    def set_all_control_modes(self, vec_ctrl_mode: List[int]) -> None: ...
    def get_all_control_modes(self) -> List[int]: ...
    
    # Current threshold
    def set_current_threshold(self, joint_motor_index: int, current_threshold: int) -> None: ...
    def get_current_threshold(self, joint_motor_index: int) -> int: ...
    def set_all_current_thresholds(self, vec_current_threshold: List[int]) -> None: ...
    def get_all_current_thresholds(self) -> List[int]: ...
    
    # Mix control
    def mix_ctrl_joint_motor(self, vec_mix_ctrl: List[MixCtrl]) -> None: ...
    
    # Error report
    def get_error_report(self, joint_motor_index: int) -> JointMotorErrorReport: ...
    def get_all_error_reports(self) -> List[JointMotorErrorReport]: ...
    def set_error_report_period(self, joint_motor_index: int, period: int) -> None: ...
    def set_all_error_report_periods(self, vec_period: List[int]) -> None: ...
    
    # Temperature report
    def get_temperature_report(self, joint_motor_index: int) -> int: ...
    def get_all_temperature_reports(self) -> List[int]: ...
    def set_temperature_report_period(self, joint_motor_index: int, period: int) -> None: ...
    def set_all_temperature_report_periods(self, vec_period: List[int]) -> None: ...
    
    # Current report
    def get_current_report(self, joint_motor_index: int) -> int: ...
    def get_all_current_reports(self) -> List[int]: ...
    def set_current_report_period(self, joint_motor_index: int, period: int) -> None: ...
    def set_all_current_report_periods(self, vec_period: List[int]) -> None: ...
    
    # Device information
    def get_vendor_info(self) -> str: ...
    def get_device_info(self) -> str: ...
    
    # Data details display
    def show_data_details(self, show: bool) -> None: ...